AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters: 
  NumberOfIteration: 
    Type: Number
    Default: 30
  ProcessEachImage:
    Type: String
    Default: true
    AllowedValues: 
      - true
      - false
Description: >
  documents-set-textract
Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 300
    Handler: app.lambdaHandler
    Environment:
      Variables:
        ImagesBucket: !Ref ImagesBucket
        TextractBucket: !Ref TextractBucket
        ProcessEachImage: !Ref ProcessEachImage
Resources:
  StartDocumentStateMachine:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-document-state-machine/
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Environment:
        Variables:
          StateMachineArn: !Ref DocumentStateMachine
      Events:
        ConvertPdfToImagesEvent:
          Type: S3
          Properties:
            Bucket: !Ref PdfBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  -
                    Name: "suffix"
                    Value: ".pdf"

  ConvertPdfToImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pdf2images/
      Timeout: 900
      MemorySize: 1024
      Policies: AWSLambdaExecute
      Layers:
        - !Ref GhostscriptLayer

  GhostscriptLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/lambda-ghostscript
      CompatibleRuntimes:
        - nodejs8.10
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete    

  AwsSdkLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/aws-sdk
      CompatibleRuntimes:
        - nodejs8.10
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete   
      
  AnalyzeDocumentImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analyze-document-images/
      MemorySize: 1024
      Layers:
        - !Ref AwsSdkLayer         
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
        
  Iterator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: iterator/
      
  TextractCompletedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "TextractCompletionTopic"
      
  StartDocumentAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-document-analysis/
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
      Layers:
        - !Ref AwsSdkLayer        
      Environment:
        Variables:
          TextractCompletedTopicArn: !Ref TextractCompletedTopic
          TextractExecutionRoleArn: !GetAtt [ TextractExecutionRole, Arn ] 
          
  GetDocumentAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-document-analysis/  
      Policies: 
        - AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
      Layers:
        - !Ref AwsSdkLayer     

  JsonToExcel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: json-to-excel/  
      MemorySize: 2048
      Policies: 
        - AWSLambdaExecute
        
  TextractExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - textract.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - SNS:Publish
            Resource: !Ref TextractCompletedTopic
      
  DocumentStatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  DocumentStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Documents Set Textract State Machine",
              "StartAt": "Analyze Document",
              "States": {
                "Analyze Document": {
                  "Type": "Parallel",
                  "Next": "Json To Excel",
                  "Branches": [
                   {
                     "StartAt": "Start Document Analysis",
                     "States": {
                       "Start Document Analysis": {
                          "Type": "Task",
                          "Resource": "${StartDocumentAnalysis}",
                          "Next": "Configure Count"
                       },
                      "Configure Count": {
                          "Type": "Pass",
                          "InputPath": "$.JobId",
                          "Result": {
                              "count": ${NumberOfIteration},
                              "index": 0,
                              "step": 1
                          },
                          "ResultPath": "$.iterator",
                          "Next": "Iterator"
                        },
                        "Iterator": {
                            "Type": "Task",
                            "Resource": "${Iterator}",
                            "ResultPath": "$.iterator",
                            "Next": "Is Count Reached Or Succeeded"
                        },
                        "Is Count Reached Or Succeeded": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.iterator.continue",
                                    "BooleanEquals": true,
                                    "Next": "Get Document Analysis"
                                }
                            ],
                            "Default": "Finish Document Analysis"
                        },
                        "Get Document Analysis": {
                            "Type": "Task",
                            "Resource": "${GetDocumentAnalysis}",
                            "Next": "Wait 10 seconds"
                        },
                        "Wait 10 seconds": {
                          "Type": "Wait",
                          "Seconds": 10,
                          "Next": "Iterator"
                        },
                        "Finish Document Analysis": {
                            "Type": "Pass",
                            "OutputPath": "$.resultKey", 
                            "End": true
                        }            
                     }
                    },      
                    {
                      "StartAt": "Convert PDF to Images",
                      "States": {
                        "Convert PDF to Images": {
                          "Type": "Task",
                          "Resource": "${ConvertPdfToImages}",
                          "Next": "Set Process Each Image Variable"
                        },
                        "Set Process Each Image Variable": {
                          "Type": "Pass",
                          "Result": ${ProcessEachImage},
                          "ResultPath": "$.ProcessEachImage",
                          "Next": "Analyze Document Each Image"
                        },
                        "Analyze Document Each Image": {
                          "Type": "Choice",
                          "Choices": [
                              {
                                  "Variable": "$.ProcessEachImage",
                                  "BooleanEquals": true,
                                  "Next": "Process Document Images"
                              }
                          ],
                          "Default": "Just Extract Images"
                        },
                        "Process Document Images": {
                          "Type": "Task",
                          "Resource": "${AnalyzeDocumentImages}",
                          "End": true,
                          "Retry": [ {
                              "ErrorEquals": [ "ProvisionedThroughputExceededException"],
                              "IntervalSeconds": 10,
                              "BackoffRate": 2.0,
                              "MaxAttempts": 3
                          }]
                        },
                        "Just Extract Images": {
                            "Type": "Pass",
                            "End": true
                        }     
                      }
                   }
                  ]
                },
                "Json To Excel": {
                  "Type": "Task",
                  "Resource": "${JsonToExcel}",
                  "Next": "SuccessState"
                },
                "SuccessState": {
                  "Type": "Succeed"
                }
              }
            }
          - 
            StartDocumentAnalysis: !GetAtt [ StartDocumentAnalysis, Arn ]
            ConvertPdfToImages: !GetAtt [ ConvertPdfToImages, Arn ]
            AnalyzeDocumentImages: !GetAtt [ AnalyzeDocumentImages, Arn ]
            GetDocumentAnalysis: !GetAtt [ GetDocumentAnalysis, Arn ]
            Iterator: !GetAtt [ Iterator, Arn ]
            JsonToExcel: !GetAtt [ JsonToExcel, Arn ]
      RoleArn: !GetAtt [ DocumentStatesExecutionRole, Arn ]
      
  PdfBucket:
    Type: AWS::S3::Bucket
    
  ImagesBucket:
    Type: AWS::S3::Bucket
  
  TextractBucket:
    Type: AWS::S3::Bucket
    

